
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/coding_dqn.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_coding_dqn.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_coding_dqn.py:


Coding a pixel-based DQN using TorchRL
=======================================

.. GENERATED FROM PYTHON SOURCE LINES 8-44

This tutorial will guide you through the steps to code DQN to solve the
CartPole task from scratch. DQN
(`Deep Q-Learning <https://www.cs.toronto.edu/~vmnih/docs/dqn.pdf>`_) was
the founding work in deep reinforcement learning. On a high level, the
algorithm is quite simple: Q-learning consists in learning a table of
state-action values in such a way that, when facing any particular state,
we know which action to pick just by searching for the action with the
highest value. This simple setting requires the actions and states to be
discretizable. DQN uses a neural network that maps state-actions pairs to
a certain value, which amortizes the cost of storing and exploring all the
possible states: if a state has not been seen in the past, we can still pass
it through our neural network and get an interpolated value for each of the
actions available.

In this tutorial, you will learn:

- how to build an environment in TorchRL, including transforms (e.g. data
  normalization, frame concatenation, resizing and turning to grayscale)
  and parallel execution;
- how to design a QValue actor, i.e. an actor that esitmates the action
  values and picks up the action with the highest estimated return;
- how to collect data from your environment efficiently and store them
  in a replay buffer;
- how to store trajectories (and not transitions) in your replay buffer),
  and how to estimate returns using TD(lambda);
- how to make a module functional and use ;
- and finally how to evaluate your model.

This tutorial assumes the reader is familiar with some of TorchRL
primitives, such as ``TensorDict`` and ``TensorDictModules``, although it
should be sufficiently transparent to be understood without a deep
understanding of these classes.

We do not aim at giving a SOTA implementation of the algorithm, but rather
to provide a high-level illustration of TorchRL features in the context
of this algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 44-85

.. code-block:: default



    import torch
    import tqdm
    from functorch import vmap
    from IPython import display
    from matplotlib import pyplot as plt
    from tensordict import TensorDict
    from tensordict.nn import get_functional
    from torch import nn
    from torchrl.collectors import MultiaSyncDataCollector
    from torchrl.data import LazyMemmapStorage, TensorDictReplayBuffer
    from torchrl.envs import EnvCreator, ParallelEnv
    from torchrl.envs.libs.gym import GymEnv
    from torchrl.envs.transforms import (
        CatFrames,
        CatTensors,
        Compose,
        GrayScale,
        ObservationNorm,
        Resize,
        ToTensorImage,
        TransformedEnv,
    )
    from torchrl.envs.utils import set_exploration_mode, step_mdp
    from torchrl.modules import DuelingCnnDQNet, EGreedyWrapper, QValueActor


    def is_notebook() -> bool:
        try:
            shell = get_ipython().__class__.__name__
            if shell == "ZMQInteractiveShell":
                return True  # Jupyter notebook or qtconsole
            elif shell == "TerminalInteractiveShell":
                return False  # Terminal running IPython
            else:
                return False  # Other type (?)
        except NameError:
            return False  # Probably standard Python interpreter









.. GENERATED FROM PYTHON SOURCE LINES 91-96

Hyperparameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Let's start with our hyperparameters. This is a totally arbitrary list of
hyperparams that we found to work well in practice. Hopefully the performance
of the algorithm should not be too sentitive to slight variations of these.

.. GENERATED FROM PYTHON SOURCE LINES 96-137

.. code-block:: default


    # hyperparams

    # the learning rate of the optimizer
    lr = 2e-3
    # the beta parameters of Adam
    betas = (0.9, 0.999)
    # gamma decay factor
    gamma = 0.99
    # lambda decay factor (see second the part with TD(lambda)
    lmbda = 0.95
    # total frames collected in the environment. In other implementations, the user defines a maximum number of episodes.
    # This is harder to do with our data collectors since they return batches of N collected frames, where N is a constant.
    # However, one can easily get the same restriction on number of episodes by breaking the training loop when a certain number
    # episodes has been collected.
    total_frames = 500
    # Random frames used to initialize the replay buffer.
    init_random_frames = 100
    # Frames in each batch collected.
    frames_per_batch = 32
    # Optimization steps per batch collected
    n_optim = 4
    # Frames sampled from the replay buffer at each optimization step
    batch_size = 32
    # Size of the replay buffer in terms of frames
    buffer_size = min(total_frames, 100000)
    # Number of environments run in parallel in each data collector
    n_workers = 1

    device = "cuda:0" if torch.cuda.device_count() > 0 else "cpu"

    # Smooth target network update decay parameter. This loosely corresponds to a 1/(1-tau) interval with hard target network update
    tau = 0.005

    # Initial and final value of the epsilon factor in Epsilon-greedy exploration (notice that since our policy is deterministic exploration is crucial)
    eps_greedy_val = 0.1
    eps_greedy_val_env = 0.05

    # To speed up learning, we set the bias of the last layer of our value network to a predefined value
    init_bias = 20.0








.. GENERATED FROM PYTHON SOURCE LINES 138-153

**Note**: for fast rendering of the tutorial ``total_frames`` hyperparameter
was set to a very low number. To get a reasonable performance, use a greater
value e.g. 500000

Building the environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Our environment builder has three arguments:

- parallel: determines whether multiple environments have to be run in
  parallel. We stack the transforms after the ParallelEnv to take advantage
  of vectorization of the operations on device, although this would
  techinally work with every single environment attached to its own set of
  transforms.
- mean and standard deviation: we normalize the observations (images)
  with two parameters computed from a random rollout in the environment.

.. GENERATED FROM PYTHON SOURCE LINES 153-184

.. code-block:: default



    def make_env(parallel=False, m=0, s=1):

        if parallel:
            base_env = ParallelEnv(
                n_workers,
                EnvCreator(
                    lambda: GymEnv(
                        "CartPole-v1", from_pixels=True, pixels_only=True, device=device
                    )
                ),
            )
        else:
            base_env = GymEnv(
                "CartPole-v1", from_pixels=True, pixels_only=True, device=device
            )

        env = TransformedEnv(
            base_env,
            Compose(
                ToTensorImage(),
                GrayScale(),
                Resize(64, 64),
                ObservationNorm(in_keys=["pixels"], loc=m, scale=s, standard_normal=True),
                CatFrames(4, in_keys=["pixels"]),
            ),
        )
        return env









.. GENERATED FROM PYTHON SOURCE LINES 185-186

Compute normalizing constants:

.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: default


    dummy_env = make_env()
    v = dummy_env.transform[3].parent.reset()["pixels"]
    m, s = v.mean().item(), v.std().item()
    m, s





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (0.9927790760993958, 0.0761055275797844)



.. GENERATED FROM PYTHON SOURCE LINES 193-202

The problem
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We can have a look at the problem by generating a video with a random
policy. From gym:

*A pole is attached by an un-actuated joint to a cart, which moves along a*
*frictionless track. The pendulum is placed upright on the cart and the*
*goal is to balance the pole by applying forces in the left and right*
*direction on the cart.*

.. GENERATED FROM PYTHON SOURCE LINES 202-211

.. code-block:: default


    # we add a CatTensors transform to copy the "pixels" before it's being replaced by its grayscale, resized version
    dummy_env.transform.insert(0, CatTensors(["pixels"], "pixels_save", del_keys=False))
    # we omit the policy from the rollout call: this will generate random actions from the env.action_spec attribute
    eval_rollout = dummy_env.rollout(max_steps=10000).cpu()

    # imageio.mimwrite('cartpole_random.mp4', eval_rollout["pixels_save"].numpy(), fps=30)
    # Video('cartpole_random.mp4', width=480, height=360)








.. GENERATED FROM PYTHON SOURCE LINES 212-228

Building the model (Deep Q-network)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The following function builds a ``DuelingCnnDQNet`` object which is a
simple CNN followed by a two-layer MLP. The only trick used here is that
the action values (i.e. left and right action value) are computed using

.. math::

   values = baseline(observation) + values(observation) - values(observation).mean()

where ``baseline`` is a ``num_obs -> 1`` function and ``values`` is a
``num_obs -> num_actions`` function.

Our network is wrapped in a ``QValueActor``, which will read the state-action
values, pick up the one with the maximum value and write all those results
in the input ``TensorDict``.

.. GENERATED FROM PYTHON SOURCE LINES 228-284

.. code-block:: default



    def make_model():
        cnn_kwargs = {
            "num_cells": [32, 64, 64],
            "kernel_sizes": [6, 4, 3],
            "strides": [2, 2, 1],
            "activation_class": nn.ELU,
            "squeeze_output": True,
            "aggregator_class": nn.AdaptiveAvgPool2d,
            "aggregator_kwargs": {"output_size": (1, 1)},
        }
        mlp_kwargs = {
            "depth": 2,
            "num_cells": [
                64,
                64,
            ],
            # "out_features": dummy_env.action_spec.shape[-1],
            "activation_class": nn.ELU,
        }
        net = DuelingCnnDQNet(
            dummy_env.action_spec.shape[-1], 1, cnn_kwargs, mlp_kwargs
        ).to(device)
        net.value[-1].bias.data.fill_(init_bias)

        actor = QValueActor(net, in_keys=["pixels"], spec=dummy_env.action_spec).to(device)
        # init actor
        tensordict = dummy_env.reset()
        print("reset results:", tensordict)
        actor(tensordict)
        print("Q-value network results:", tensordict)

        # make functional
        # here's an explicit way of creating the parameters and buffer tensordict.
        # Alternatively, we could have used `params = make_functional(actor)` from
        # tensordict.nn
        params = TensorDict({k: v for k, v in actor.named_parameters()}, [])
        buffers = TensorDict({k: v for k, v in actor.named_buffers()}, [])
        params = params.update(buffers).unflatten_keys(".")  # creates a nested TensorDict
        factor = get_functional(actor)

        # creating the target parameters is fairly easy with tensordict:
        (params_target,) = (params.to_tensordict().detach(),)

        # we wrap our actor in an EGreedyWrapper for data collection
        actor_explore = EGreedyWrapper(
            actor,
            annealing_num_steps=total_frames,
            eps_init=eps_greedy_val,
            eps_end=eps_greedy_val_env,
        )

        return factor, actor, actor_explore, params, params_target









.. GENERATED FROM PYTHON SOURCE LINES 285-289

When creating the model, we initialize the network with an environment reset.
We print the resulting tensordict instance to get an idea of what
``QValueActor`` (pay attention to the keys ``action``, ``action_value`` and
``chosen_action_value`` after calling the policy).

.. GENERATED FROM PYTHON SOURCE LINES 289-300

.. code-block:: default


    (
        factor,
        actor,
        actor_explore,
        params,
        params_target,
    ) = make_model()
    params_flat = params.flatten_keys(".")
    params_target_flat = params_target.flatten_keys(".")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    reset results: TensorDict(
        fields={
            done: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.bool, is_shared=False),
            pixels: Tensor(shape=torch.Size([4, 64, 64]), device=cpu, dtype=torch.float32, is_shared=False),
            pixels_save: Tensor(shape=torch.Size([400, 600, 3]), device=cpu, dtype=torch.uint8, is_shared=False)},
        batch_size=torch.Size([]),
        device=cpu,
        is_shared=False)
    Q-value network results: TensorDict(
        fields={
            action: Tensor(shape=torch.Size([2]), device=cpu, dtype=torch.int64, is_shared=False),
            action_value: Tensor(shape=torch.Size([2]), device=cpu, dtype=torch.float32, is_shared=False),
            chosen_action_value: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.float32, is_shared=False),
            done: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.bool, is_shared=False),
            pixels: Tensor(shape=torch.Size([4, 64, 64]), device=cpu, dtype=torch.float32, is_shared=False),
            pixels_save: Tensor(shape=torch.Size([400, 600, 3]), device=cpu, dtype=torch.uint8, is_shared=False)},
        batch_size=torch.Size([]),
        device=cpu,
        is_shared=False)




.. GENERATED FROM PYTHON SOURCE LINES 301-313

Regular DQN
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We'll start with a simple implementation of DQN where the returns are
computed without bootstrapping, i.e.

  return = reward + gamma * value_next_step * not_terminated

We start with the *replay buffer*. We'll use a regular replay buffer,
although a prioritized RB could improve the performance significantly.
We place the storage on disk using ``LazyMemmapStorage``. The only requirement
of this storage is that the data given to it must always have the same
shape. This storage will be instantiated later.

.. GENERATED FROM PYTHON SOURCE LINES 313-319

.. code-block:: default


    replay_buffer = TensorDictReplayBuffer(
        storage=LazyMemmapStorage(buffer_size),
        prefetch=n_optim,
    )








.. GENERATED FROM PYTHON SOURCE LINES 320-324

Our *data collector* will run two parallel environments in parallel, and
deliver the collected tensordicts once at a time to the main process. We'll
use the ``MultiaSyncDataCollector`` collector, which will collect data while
the optimization is taking place.

.. GENERATED FROM PYTHON SOURCE LINES 324-339

.. code-block:: default



    data_collector = MultiaSyncDataCollector(
        [
            make_env(True, m=m, s=s),
            make_env(True, m=m, s=s),
        ],  # 2 collectors, each with an set of `num_workers` environments being run in parallel
        policy=actor_explore,
        frames_per_batch=frames_per_batch,
        total_frames=total_frames,
        exploration_mode="random",  # this is the default behaviour: the collector runs in `"random"` (or explorative) mode
        devices=[device, device],  # each collector can sit on a different device
        passing_devices=[device, device],
    )








.. GENERATED FROM PYTHON SOURCE LINES 340-341

Our *optimizer* and the env used for evaluation

.. GENERATED FROM PYTHON SOURCE LINES 341-346

.. code-block:: default


    optim = torch.optim.Adam(list(params_flat.values()), lr)
    dummy_env = make_env(parallel=False, m=m, s=s)
    print(actor_explore(dummy_env.reset()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    TensorDict(
        fields={
            action: Tensor(shape=torch.Size([2]), device=cpu, dtype=torch.int64, is_shared=False),
            action_value: Tensor(shape=torch.Size([2]), device=cpu, dtype=torch.float32, is_shared=False),
            chosen_action_value: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.float32, is_shared=False),
            done: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.bool, is_shared=False),
            pixels: Tensor(shape=torch.Size([4, 64, 64]), device=cpu, dtype=torch.float32, is_shared=False)},
        batch_size=torch.Size([]),
        device=cpu,
        is_shared=False)




.. GENERATED FROM PYTHON SOURCE LINES 347-348

Various lists that will contain the values recorded for evaluation:

.. GENERATED FROM PYTHON SOURCE LINES 348-360

.. code-block:: default


    evals = []
    traj_lengths_eval = []
    losses = []
    frames = []
    values = []
    grad_vals = []
    traj_lengths = []
    mavgs = []
    traj_count = []
    prev_traj_count = 0








.. GENERATED FROM PYTHON SOURCE LINES 361-363

Training loop
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 363-491

.. code-block:: default


    pbar = tqdm.tqdm(total=total_frames)
    for j, data in enumerate(data_collector):
        # trajectories are padded to be stored in the same tensordict: since we do not care about consecutive step, we'll just mask the tensordict and get the flattened representation instead.
        mask = data["mask"]
        current_frames = mask.sum().cpu().item()
        pbar.update(current_frames)

        # We store the values on the replay buffer, after placing them on CPU. When called for the first time, this will instantiate our storage object which will print its content.
        replay_buffer.extend(data[mask].cpu())

        # some logging
        if len(frames):
            frames.append(current_frames + frames[-1])
        else:
            frames.append(current_frames)

        if data["done"].any():
            done = data["done"].squeeze(-1)
            traj_lengths.append(data["step_count"][done].float().mean().item())

        # check that we have enough data to start training
        if sum(frames) > init_random_frames:
            for _ in range(n_optim):
                # sample from the RB and send to device
                sampled_data = replay_buffer.sample(batch_size)
                sampled_data = sampled_data.to(device, non_blocking=True)

                # collect data from RB
                reward = sampled_data["reward"].squeeze(-1)
                done = sampled_data["done"].squeeze(-1).to(reward.dtype)
                action = sampled_data["action"].clone()

                # Compute action value (of the action actually taken) at time t
                sampled_data_out = sampled_data.select(*actor.in_keys)
                sampled_data_out = factor(sampled_data_out, params=params)
                action_value = sampled_data_out["action_value"]
                action_value = (action_value * action.to(action_value.dtype)).sum(-1)
                with torch.no_grad():
                    # compute best action value for the next step, using target parameters
                    tdstep = step_mdp(sampled_data)
                    next_value = factor(
                        tdstep.select(*actor.in_keys),
                        params=params_target,
                    )["chosen_action_value"].squeeze(-1)
                    exp_value = reward + gamma * next_value * (1 - done)
                assert exp_value.shape == action_value.shape
                # we use MSE loss but L1 or smooth L1 should also work
                error = nn.functional.mse_loss(exp_value, action_value).mean()
                error.backward()

                gv = sum([p.grad.pow(2).sum() for p in params_flat.values()]).sqrt()
                nn.utils.clip_grad_value_(list(params_flat.values()), 1)

                optim.step()
                optim.zero_grad()

                # update of the target parameters
                for (key, p1) in params_flat.items():
                    p2 = params_target_flat[key]
                    params_target_flat.set_(key, tau * p1.data + (1 - tau) * p2.data)

            pbar.set_description(
                f"error: {error: 4.4f}, value: {action_value.mean(): 4.4f}"
            )
            actor_explore.step(current_frames)

            # logs
            with set_exploration_mode("mode"), torch.no_grad():
                # execute a rollout. The `set_exploration_mode("mode")` has no effect here since the policy is deterministic, but we add it for completeness
                eval_rollout = dummy_env.rollout(max_steps=10000, policy=actor).cpu()
            grad_vals.append(float(gv))
            traj_lengths_eval.append(eval_rollout.shape[-1])
            evals.append(eval_rollout["reward"].squeeze(-1).sum(-1).item())
            if len(mavgs):
                mavgs.append(evals[-1] * 0.05 + mavgs[-1] * 0.95)
            else:
                mavgs.append(evals[-1])
            losses.append(error.item())
            values.append(action_value.mean().item())
            traj_count.append(prev_traj_count + data["done"].sum().item())
            prev_traj_count = traj_count[-1]
            # plots
            if j % 10 == 0:
                if is_notebook():
                    display.clear_output(wait=True)
                    display.display(plt.gcf())
                else:
                    plt.clf()
                plt.figure(figsize=(15, 15))
                plt.subplot(3, 2, 1)
                plt.plot(frames[-len(evals) :], evals, label="return")
                plt.plot(frames[-len(mavgs) :], mavgs, label="mavg")
                plt.xlabel("frames collected")
                plt.ylabel("trajectory length (= return)")
                plt.subplot(3, 2, 2)
                plt.plot(traj_count[-len(evals) :], evals, label="return")
                plt.plot(traj_count[-len(mavgs) :], mavgs, label="mavg")
                plt.xlabel("trajectories collected")
                plt.legend()
                plt.subplot(3, 2, 3)
                plt.plot(frames[-len(losses) :], losses)
                plt.xlabel("frames collected")
                plt.title("loss")
                plt.subplot(3, 2, 4)
                plt.plot(frames[-len(values) :], values)
                plt.xlabel("frames collected")
                plt.title("value")
                plt.subplot(3, 2, 5)
                plt.plot(frames[-len(grad_vals) :], grad_vals)
                plt.xlabel("frames collected")
                plt.title("grad norm")
                if len(traj_lengths):
                    plt.subplot(3, 2, 6)
                    plt.plot(traj_lengths)
                    plt.xlabel("batches")
                    plt.title("traj length (training)")
            plt.savefig("dqn_td0.png")
            if is_notebook():
                plt.show()

        # update policy weights
        data_collector.update_policy_weights_()

    if is_notebook():
        display.clear_output(wait=True)
        display.display(plt.gcf())




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/images/sphx_glr_coding_dqn_001.png
         :alt: coding dqn
         :srcset: /tutorials/images/sphx_glr_coding_dqn_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/images/sphx_glr_coding_dqn_002.png
         :alt: loss, value, grad norm, traj length (training)
         :srcset: /tutorials/images/sphx_glr_coding_dqn_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/500 [00:00<?, ?it/s]      6%|6         | 32/500 [00:06<01:35,  4.89it/s]Creating a MemmapStorage...
    The storage is being created: 
            action: /tmp/tmp1l_3dk4m, 0.00762939453125 Mb of storage (size: torch.Size([500, 2])).
            action_value: /tmp/tmp21ovrxxd, 0.003814697265625 Mb of storage (size: torch.Size([500, 2])).
            chosen_action_value: /tmp/tmpejw51047, 0.0019073486328125 Mb of storage (size: torch.Size([500, 1])).
            done: /tmp/tmpf2qpbq7r, 0.000476837158203125 Mb of storage (size: torch.Size([500, 1])).
            index: /tmp/tmprj_m39j2, 0.0019073486328125 Mb of storage (size: torch.Size([500])).
            mask: /tmp/tmph1v0i3a0, 0.000476837158203125 Mb of storage (size: torch.Size([500])).
            pixels: /tmp/tmp20by6xhd, 31.25 Mb of storage (size: torch.Size([500, 4, 64, 64])).
            reward: /tmp/tmpglqyt160, 0.0019073486328125 Mb of storage (size: torch.Size([500, 1])).
            step_count: /tmp/tmp_666_9y9, 0.003814697265625 Mb of storage (size: torch.Size([500])).
            traj_ids: /tmp/tmpv_l9anhc, 0.003814697265625 Mb of storage (size: torch.Size([500])).
            ('next', 'pixels'): /tmp/tmp5q2lxd6b, 31.25 Mb of storage (size: torch.Size([500, 4, 64, 64])).
     13%|#2        | 64/500 [00:06<00:38, 11.34it/s]     19%|#9        | 96/500 [00:10<00:43,  9.28it/s]    error:  34.3328, value:  19.9695:  19%|#9        | 96/500 [00:11<00:43,  9.28it/s]    error:  34.3328, value:  19.9695:  26%|##5       | 128/500 [00:11<00:27, 13.31it/s]    error:  12.1961, value:  19.5104:  26%|##5       | 128/500 [00:12<00:27, 13.31it/s]    error:  12.1961, value:  19.5104:  32%|###2      | 160/500 [00:13<00:23, 14.43it/s]    error:  31.8997, value:  19.2111:  32%|###2      | 160/500 [00:14<00:23, 14.43it/s]    error:  31.8997, value:  19.2111:  38%|###8      | 192/500 [00:14<00:16, 18.33it/s]    error:  10.7062, value:  19.5417:  38%|###8      | 192/500 [00:15<00:16, 18.33it/s]    error:  10.7062, value:  19.5417:  45%|####4     | 224/500 [00:20<00:28,  9.75it/s]    error:  28.0678, value:  20.9726:  45%|####4     | 224/500 [00:21<00:28,  9.75it/s]    error:  28.0678, value:  20.9726:  51%|#####1    | 256/500 [00:22<00:20, 11.96it/s]    error:  20.7803, value:  17.9396:  51%|#####1    | 256/500 [00:22<00:20, 11.96it/s]    error:  20.7803, value:  17.9396:  58%|#####7    | 288/500 [00:24<00:17, 12.24it/s]    error:  18.1335, value:  18.3466:  58%|#####7    | 288/500 [00:25<00:17, 12.24it/s]    error:  18.1335, value:  18.3466:  64%|######4   | 320/500 [00:27<00:14, 12.18it/s]    error:  23.5000, value:  19.8063:  64%|######4   | 320/500 [00:28<00:14, 12.18it/s]    error:  23.5000, value:  19.8063:  70%|#######   | 352/500 [00:29<00:11, 12.79it/s]    error:  7.3759, value:  19.7590:  70%|#######   | 352/500 [00:30<00:11, 12.79it/s]     error:  7.3759, value:  19.7590:  77%|#######6  | 384/500 [00:31<00:08, 14.03it/s]    error:  45.6204, value:  18.3932:  77%|#######6  | 384/500 [00:32<00:08, 14.03it/s]    error:  45.6204, value:  18.3932:  83%|########3 | 416/500 [00:35<00:07, 11.92it/s]    error:  28.8345, value:  18.4719:  83%|########3 | 416/500 [00:35<00:07, 11.92it/s]    error:  28.8345, value:  18.4719:  90%|########9 | 448/500 [00:36<00:03, 14.46it/s]    error:  18.5943, value:  19.6253:  90%|########9 | 448/500 [00:36<00:03, 14.46it/s]    error:  18.5943, value:  19.6253:  96%|#########6| 480/500 [00:40<00:01, 11.46it/s]    error:  1.9974, value:  20.0813:  96%|#########6| 480/500 [00:41<00:01, 11.46it/s]     error:  1.9974, value:  20.0813: : 512it [00:42, 12.90it/s]                           error:  40.1958, value:  18.6198: : 512it [00:42, 12.90it/s]



.. GENERATED FROM PYTHON SOURCE LINES 492-494

**Note**: As already mentioned above, to get a more reasonable performance,
use a greater value for ``total_frames`` e.g. 500000.

.. GENERATED FROM PYTHON SOURCE LINES 494-501

.. code-block:: default



    plt.figure(figsize=(15, 15))
    plt.imshow(plt.imread("dqn_td0.png"))
    plt.tight_layout()
    plt.axis("off")




.. image-sg:: /tutorials/images/sphx_glr_coding_dqn_003.png
   :alt: coding dqn
   :srcset: /tutorials/images/sphx_glr_coding_dqn_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-0.5, 1499.5, 1499.5, -0.5)



.. GENERATED FROM PYTHON SOURCE LINES 502-519

.. code-block:: default


    # save results
    torch.save(
        {
            "frames": frames,
            "evals": evals,
            "mavgs": mavgs,
            "losses": losses,
            "values": values,
            "grad_vals": grad_vals,
            "traj_lengths_training": traj_lengths,
            "traj_count": traj_count,
            "weights": (params,),
        },
        "saved_results_td0.pt",
    )








.. GENERATED FROM PYTHON SOURCE LINES 520-536

TD-lambda
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We can improve the above algorithm by getting a better estimate of the
return, using not only the next state value but the whole sequence of rewards
and values that follow a particular step.

TorchRL provides a vectorized version of TD(lambda) named
``vec_td_lambda_advantage_estimate``. We'll use this to obtain a target
value that the value network will be trained to match.

The big difference in this implementation is that we'll store entire
trajectories and not single steps in the replay buffer. This will be done
automatically as long as we're not "flattening" the tensordict collected
using its mask: by keeping a shape ``[Batch x timesteps]`` and giving this
to the RB, we'll be creating a replay buffer of size
``[Capacity x timesteps]``.

.. GENERATED FROM PYTHON SOURCE LINES 536-541

.. code-block:: default



    from tensordict.tensordict import pad
    from torchrl.objectives.value.functional import vec_td_lambda_advantage_estimate








.. GENERATED FROM PYTHON SOURCE LINES 542-543

We reset the actor, the RB and the collector

.. GENERATED FROM PYTHON SOURCE LINES 543-554

.. code-block:: default


    (
        factor,
        actor,
        actor_explore,
        params,
        params_target,
    ) = make_model()
    params_flat = params.flatten_keys(".")
    params_target_flat = params_target.flatten_keys(".")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    reset results: TensorDict(
        fields={
            done: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.bool, is_shared=False),
            pixels: Tensor(shape=torch.Size([4, 64, 64]), device=cpu, dtype=torch.float32, is_shared=False)},
        batch_size=torch.Size([]),
        device=cpu,
        is_shared=False)
    Q-value network results: TensorDict(
        fields={
            action: Tensor(shape=torch.Size([2]), device=cpu, dtype=torch.int64, is_shared=False),
            action_value: Tensor(shape=torch.Size([2]), device=cpu, dtype=torch.float32, is_shared=False),
            chosen_action_value: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.float32, is_shared=False),
            done: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.bool, is_shared=False),
            pixels: Tensor(shape=torch.Size([4, 64, 64]), device=cpu, dtype=torch.float32, is_shared=False)},
        batch_size=torch.Size([]),
        device=cpu,
        is_shared=False)




.. GENERATED FROM PYTHON SOURCE LINES 555-573

.. code-block:: default


    max_size = frames_per_batch // n_workers

    replay_buffer = TensorDictReplayBuffer(
        storage=LazyMemmapStorage(-(-buffer_size // max_size)),
        prefetch=n_optim,
    )

    data_collector = MultiaSyncDataCollector(
        [make_env(True, m=m, s=s), make_env(True, m=m, s=s)],
        policy=actor_explore,
        frames_per_batch=frames_per_batch,
        total_frames=total_frames,
        exploration_mode="random",
        devices=[device, device],
        passing_devices=[device, device],
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    error:  40.1958, value:  18.6198: : 512it [00:53, 12.90it/s]



.. GENERATED FROM PYTHON SOURCE LINES 574-579

.. code-block:: default


    optim = torch.optim.Adam(list(params_flat.values()), lr)
    dummy_env = make_env(parallel=False, m=m, s=s)
    print(actor_explore(dummy_env.reset()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    TensorDict(
        fields={
            action: Tensor(shape=torch.Size([2]), device=cpu, dtype=torch.int64, is_shared=False),
            action_value: Tensor(shape=torch.Size([2]), device=cpu, dtype=torch.float32, is_shared=False),
            chosen_action_value: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.float32, is_shared=False),
            done: Tensor(shape=torch.Size([1]), device=cpu, dtype=torch.bool, is_shared=False),
            pixels: Tensor(shape=torch.Size([4, 64, 64]), device=cpu, dtype=torch.float32, is_shared=False)},
        batch_size=torch.Size([]),
        device=cpu,
        is_shared=False)




.. GENERATED FROM PYTHON SOURCE LINES 580-592

.. code-block:: default


    evals = []
    traj_lengths_eval = []
    losses = []
    frames = []
    values = []
    grad_vals = []
    traj_lengths = []
    mavgs = []
    traj_count = []
    prev_traj_count = 0








.. GENERATED FROM PYTHON SOURCE LINES 593-601

Training loop
------------------------------
There are very few differences with the training loop above:

- The tensordict received by the collector is not masked but padded to the
  desired shape (such that all tensordicts have the same shape of
  ``[Batch x max_size]``), and sent directly to the RB.
- We use ``vec_td_lambda_advantage_estimate`` to compute the target value.

.. GENERATED FROM PYTHON SOURCE LINES 601-733

.. code-block:: default


    pbar = tqdm.tqdm(total=total_frames)
    for j, data in enumerate(data_collector):
        mask = data["mask"]
        data = pad(data, [0, 0, 0, max_size - data.shape[1]])
        current_frames = mask.sum().cpu().item()
        pbar.update(current_frames)

        replay_buffer.extend(data.cpu())
        if len(frames):
            frames.append(current_frames + frames[-1])
        else:
            frames.append(current_frames)

        if data["done"].any():
            done = data["done"].squeeze(-1)
            traj_lengths.append(data["step_count"][done].float().mean().item())

        if sum(frames) > init_random_frames:
            for _ in range(n_optim):
                sampled_data = replay_buffer.sample(batch_size // max_size)
                sampled_data = sampled_data.clone().to(device, non_blocking=True)

                reward = sampled_data["reward"]
                done = sampled_data["done"].to(reward.dtype)
                action = sampled_data["action"].clone()

                sampled_data_out = sampled_data.select(*actor.in_keys)
                sampled_data_out = vmap(factor, (0, None))(sampled_data_out, params)
                action_value = sampled_data_out["action_value"]
                action_value = (action_value * action.to(action_value.dtype)).sum(-1, True)
                with torch.no_grad():
                    tdstep = step_mdp(sampled_data)
                    next_value = vmap(factor, (0, None))(
                        tdstep.select(*actor.in_keys), params
                    )
                    next_value = next_value["chosen_action_value"]
                error = vec_td_lambda_advantage_estimate(
                    gamma,
                    lmbda,
                    action_value,
                    next_value,
                    reward,
                    done,
                ).pow(2)
                # reward + gamma * next_value * (1 - done)
                mask = sampled_data["mask"]
                error = error[mask].mean()
                # assert exp_value.shape == action_value.shape
                # error = nn.functional.smooth_l1_loss(exp_value, action_value).mean()
                # error = nn.functional.mse_loss(exp_value, action_value)[mask].mean()
                error.backward()

                # gv = sum([p.grad.pow(2).sum() for p in params_flat.values()]).sqrt()
                # nn.utils.clip_grad_value_(list(params_flat.values()), 1)
                gv = nn.utils.clip_grad_norm_(list(params_flat.values()), 100)

                optim.step()
                optim.zero_grad()

                for (key, p1) in params_flat.items():
                    p2 = params_target_flat[key]
                    params_target_flat.set_(key, tau * p1.data + (1 - tau) * p2.data)

            pbar.set_description(
                f"error: {error: 4.4f}, value: {action_value.mean(): 4.4f}"
            )
            actor_explore.step(current_frames)

            # logs
            with set_exploration_mode("random"), torch.no_grad():
                #         eval_rollout = dummy_env.rollout(max_steps=1000, policy=actor_explore, auto_reset=True).cpu()
                eval_rollout = dummy_env.rollout(
                    max_steps=10000, policy=actor, auto_reset=True
                ).cpu()
            grad_vals.append(float(gv))
            traj_lengths_eval.append(eval_rollout.shape[-1])
            evals.append(eval_rollout["reward"].squeeze(-1).sum(-1).item())
            if len(mavgs):
                mavgs.append(evals[-1] * 0.05 + mavgs[-1] * 0.95)
            else:
                mavgs.append(evals[-1])
            losses.append(error.item())
            values.append(action_value[mask].mean().item())
            traj_count.append(prev_traj_count + data["done"].sum().item())
            prev_traj_count = traj_count[-1]
            # plots
            if j % 10 == 0:
                if is_notebook():
                    display.clear_output(wait=True)
                    display.display(plt.gcf())
                else:
                    plt.clf()
                plt.figure(figsize=(15, 15))
                plt.subplot(3, 2, 1)
                plt.plot(frames[-len(evals) :], evals, label="return")
                plt.plot(frames[-len(mavgs) :], mavgs, label="mavg")
                plt.xlabel("frames collected")
                plt.ylabel("trajectory length (= return)")
                plt.subplot(3, 2, 2)
                plt.plot(traj_count[-len(evals) :], evals, label="return")
                plt.plot(traj_count[-len(mavgs) :], mavgs, label="mavg")
                plt.xlabel("trajectories collected")
                plt.legend()
                plt.subplot(3, 2, 3)
                plt.plot(frames[-len(losses) :], losses)
                plt.xlabel("frames collected")
                plt.title("loss")
                plt.subplot(3, 2, 4)
                plt.plot(frames[-len(values) :], values)
                plt.xlabel("frames collected")
                plt.title("value")
                plt.subplot(3, 2, 5)
                plt.plot(frames[-len(grad_vals) :], grad_vals)
                plt.xlabel("frames collected")
                plt.title("grad norm")
                if len(traj_lengths):
                    plt.subplot(3, 2, 6)
                    plt.plot(traj_lengths)
                    plt.xlabel("batches")
                    plt.title("traj length (training)")
            plt.savefig("dqn_tdlambda.png")
            if is_notebook():
                plt.show()

        # update policy weights
        data_collector.update_policy_weights_()

    if is_notebook():
        display.clear_output(wait=True)
        display.display(plt.gcf())




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/images/sphx_glr_coding_dqn_004.png
         :alt: coding dqn
         :srcset: /tutorials/images/sphx_glr_coding_dqn_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/images/sphx_glr_coding_dqn_005.png
         :alt: loss, value, grad norm, traj length (training)
         :srcset: /tutorials/images/sphx_glr_coding_dqn_005.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


      0%|          | 0/500 [00:00<?, ?it/s]    error:  40.1958, value:  18.6198: : 512it [00:55,  9.16it/s]

      6%|6         | 32/500 [00:06<01:42,  4.58it/s]Creating a MemmapStorage...
    The storage is being created: 
            action: /tmp/tmpw1gc7yqc, 0.0078125 Mb of storage (size: torch.Size([16, 32, 2])).
            action_value: /tmp/tmper6ii3u8, 0.00390625 Mb of storage (size: torch.Size([16, 32, 2])).
            chosen_action_value: /tmp/tmpzkbb62q_, 0.001953125 Mb of storage (size: torch.Size([16, 32, 1])).
            done: /tmp/tmpr6svml7x, 0.00048828125 Mb of storage (size: torch.Size([16, 32, 1])).
            index: /tmp/tmpag7g9t1e, 6.103515625e-05 Mb of storage (size: torch.Size([16])).
            mask: /tmp/tmpxh3595rv, 0.00048828125 Mb of storage (size: torch.Size([16, 32])).
            pixels: /tmp/tmp6ic0chsu, 32.0 Mb of storage (size: torch.Size([16, 32, 4, 64, 64])).
            reward: /tmp/tmp0qg5iy46, 0.001953125 Mb of storage (size: torch.Size([16, 32, 1])).
            step_count: /tmp/tmp8i559ahr, 0.00390625 Mb of storage (size: torch.Size([16, 32])).
            traj_ids: /tmp/tmpcnaumo2o, 0.00390625 Mb of storage (size: torch.Size([16, 32])).
            ('next', 'pixels'): /tmp/tmp104a_nk6, 32.0 Mb of storage (size: torch.Size([16, 32, 4, 64, 64])).

     13%|#2        | 64/500 [00:07<00:42, 10.34it/s]
     19%|#9        | 96/500 [00:12<00:49,  8.24it/s]
    error:  9.4428, value:  7.5369:  19%|#9        | 96/500 [00:12<00:49,  8.24it/s]
    error:  9.4428, value:  7.5369:  26%|##5       | 128/500 [00:13<00:32, 11.33it/s]
    error:  11.7821, value:  8.8290:  26%|##5       | 128/500 [00:14<00:32, 11.33it/s]
    error:  11.7821, value:  8.8290:  32%|###2      | 160/500 [00:17<00:33, 10.04it/s]
    error:  10.6582, value:  9.3924:  32%|###2      | 160/500 [00:17<00:33, 10.04it/s]
    error:  10.6582, value:  9.3924:  38%|###8      | 192/500 [00:19<00:27, 11.19it/s]
    error:  74.7146, value:  10.7921:  38%|###8      | 192/500 [00:20<00:27, 11.19it/s]
    error:  74.7146, value:  10.7921:  45%|####4     | 224/500 [00:21<00:22, 12.11it/s]
    error:  10.5996, value:  12.9823:  45%|####4     | 224/500 [00:22<00:22, 12.11it/s]
    error:  10.5996, value:  12.9823:  51%|#####1    | 256/500 [00:24<00:21, 11.61it/s]
    error:  6.9719, value:  11.9211:  51%|#####1    | 256/500 [00:25<00:21, 11.61it/s] 
    error:  6.9719, value:  11.9211:  58%|#####7    | 288/500 [00:25<00:13, 15.25it/s]
    error:  29.2837, value:  17.0055:  58%|#####7    | 288/500 [00:25<00:13, 15.25it/s]
    error:  29.2837, value:  17.0055:  64%|######4   | 320/500 [00:27<00:12, 14.32it/s]
    error:  6.6955, value:  14.3260:  64%|######4   | 320/500 [00:28<00:12, 14.32it/s] 
    error:  6.6955, value:  14.3260:  70%|#######   | 352/500 [00:30<00:11, 13.29it/s]
    error:  3.3747, value:  9.3487:  70%|#######   | 352/500 [00:31<00:11, 13.29it/s] 
    error:  3.3747, value:  9.3487:  77%|#######6  | 384/500 [00:32<00:07, 15.24it/s]
    error:  12.0512, value:  11.0987:  77%|#######6  | 384/500 [00:32<00:07, 15.24it/s]
    error:  12.0512, value:  11.0987:  83%|########3 | 416/500 [00:34<00:05, 14.82it/s]
    error:  5.1704, value:  11.2637:  83%|########3 | 416/500 [00:35<00:05, 14.82it/s] 
    error:  5.1704, value:  11.2637:  90%|########9 | 448/500 [00:35<00:03, 16.15it/s]
    error:  1.5493, value:  7.3087:  90%|########9 | 448/500 [00:36<00:03, 16.15it/s] 
    error:  1.5493, value:  7.3087:  96%|#########6| 480/500 [00:37<00:01, 17.61it/s]
    error:  14.8016, value:  1.0519:  96%|#########6| 480/500 [00:38<00:01, 17.61it/s]
    error:  14.8016, value:  1.0519: : 512it [00:39, 17.71it/s]                       
    error:  8.0462, value:  0.9057: : 512it [00:39, 17.71it/s] 



.. GENERATED FROM PYTHON SOURCE LINES 734-736

**Note**: As already mentioned above, to get a more reasonable performance,
use a greater value for ``total_frames`` e.g. 500000.

.. GENERATED FROM PYTHON SOURCE LINES 736-742

.. code-block:: default


    plt.figure(figsize=(15, 15))
    plt.imshow(plt.imread("dqn_tdlambda.png"))
    plt.tight_layout()
    plt.axis("off")




.. image-sg:: /tutorials/images/sphx_glr_coding_dqn_006.png
   :alt: coding dqn
   :srcset: /tutorials/images/sphx_glr_coding_dqn_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-0.5, 1499.5, 1499.5, -0.5)



.. GENERATED FROM PYTHON SOURCE LINES 743-760

.. code-block:: default


    # save results
    torch.save(
        {
            "frames": frames,
            "evals": evals,
            "mavgs": mavgs,
            "losses": losses,
            "values": values,
            "grad_vals": grad_vals,
            "traj_lengths_training": traj_lengths,
            "traj_count": traj_count,
            "weights": (params,),
        },
        "saved_results_tdlambda.pt",
    )








.. GENERATED FROM PYTHON SOURCE LINES 761-767

Let's compare the results on a single plot. Because the TD(lambda) version
works better, we'll have fewer episodes collected for a given number of
frames (as there are more frames per episode).

**Note**: As already mentioned above, to get a more reasonable performance,
use a greater value for ``total_frames`` e.g. 500000.

.. GENERATED FROM PYTHON SOURCE LINES 767-847

.. code-block:: default


    load_td0 = torch.load("saved_results_td0.pt")
    load_tdlambda = torch.load("saved_results_tdlambda.pt")
    frames_td0 = load_td0["frames"]
    frames_tdlambda = load_tdlambda["frames"]
    evals_td0 = load_td0["evals"]
    evals_tdlambda = load_tdlambda["evals"]
    mavgs_td0 = load_td0["mavgs"]
    mavgs_tdlambda = load_tdlambda["mavgs"]
    losses_td0 = load_td0["losses"]
    losses_tdlambda = load_tdlambda["losses"]
    values_td0 = load_td0["values"]
    values_tdlambda = load_tdlambda["values"]
    grad_vals_td0 = load_td0["grad_vals"]
    grad_vals_tdlambda = load_tdlambda["grad_vals"]
    traj_lengths_td0 = load_td0["traj_lengths_training"]
    traj_lengths_tdlambda = load_tdlambda["traj_lengths_training"]
    traj_count_td0 = load_td0["traj_count"]
    traj_count_tdlambda = load_tdlambda["traj_count"]

    plt.figure(figsize=(15, 15))
    plt.subplot(3, 2, 1)
    plt.plot(frames[-len(evals_td0) :], evals_td0, label="return (td0)", alpha=0.5)
    plt.plot(
        frames[-len(evals_tdlambda) :],
        evals_tdlambda,
        label="return (td(lambda))",
        alpha=0.5,
    )
    plt.plot(frames[-len(mavgs_td0) :], mavgs_td0, label="mavg (td0)")
    plt.plot(frames[-len(mavgs_tdlambda) :], mavgs_tdlambda, label="mavg (td(lambda))")
    plt.xlabel("frames collected")
    plt.ylabel("trajectory length (= return)")
    plt.subplot(3, 2, 2)
    plt.plot(traj_count_td0[-len(evals_td0) :], evals_td0, label="return (td0)", alpha=0.5)
    plt.plot(
        traj_count_tdlambda[-len(evals_tdlambda) :],
        evals_tdlambda,
        label="return (td(lambda))",
        alpha=0.5,
    )
    plt.plot(traj_count_td0[-len(mavgs_td0) :], mavgs_td0, label="mavg (td0)")
    plt.plot(
        traj_count_tdlambda[-len(mavgs_tdlambda) :],
        mavgs_tdlambda,
        label="mavg (td(lambda))",
    )
    plt.xlabel("trajectories collected")
    plt.legend()
    plt.subplot(3, 2, 3)
    plt.plot(frames[-len(losses_td0) :], losses_td0, label="loss (td0)")
    plt.plot(frames[-len(losses_tdlambda) :], losses_tdlambda, label="loss (td(lambda))")
    plt.xlabel("frames collected")
    plt.title("loss")
    plt.legend()
    plt.subplot(3, 2, 4)
    plt.plot(frames[-len(values_td0) :], values_td0, label="values (td0)")
    plt.plot(frames[-len(values_tdlambda) :], values_tdlambda, label="values (td(lambda))")
    plt.xlabel("frames collected")
    plt.title("value")
    plt.legend()
    plt.subplot(3, 2, 5)
    plt.plot(frames[-len(grad_vals_td0) :], grad_vals_td0, label="gradient norm (td0)")
    plt.plot(
        frames[-len(grad_vals_tdlambda) :],
        grad_vals_tdlambda,
        label="gradient norm (td(lambda))",
    )
    plt.xlabel("frames collected")
    plt.title("grad norm")
    plt.legend()
    if len(traj_lengths):
        plt.subplot(3, 2, 6)
        plt.plot(traj_lengths_td0, label="episode length (td0)")
        plt.plot(traj_lengths_tdlambda, label="episode length (td(lambda))")
        plt.xlabel("batches")
        plt.legend()
        plt.title("episode length (training)")





.. image-sg:: /tutorials/images/sphx_glr_coding_dqn_007.png
   :alt: loss, value, grad norm, episode length (training)
   :srcset: /tutorials/images/sphx_glr_coding_dqn_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 848-851

Finally, we generate a new video to check what the algorithm has learnt.
If all goes well, the duration should be significantly longer than with the
initial, random rollout.

.. GENERATED FROM PYTHON SOURCE LINES 851-856

.. code-block:: default


    dummy_env.transform.insert(0, CatTensors(["pixels"], "pixels_save", del_keys=False))
    eval_rollout = dummy_env.rollout(max_steps=10000, policy=actor, auto_reset=True).cpu()
    eval_rollout





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    TensorDict(
        fields={
            action: Tensor(shape=torch.Size([10, 2]), device=cpu, dtype=torch.int64, is_shared=False),
            action_value: Tensor(shape=torch.Size([10, 2]), device=cpu, dtype=torch.float32, is_shared=False),
            chosen_action_value: Tensor(shape=torch.Size([10, 1]), device=cpu, dtype=torch.float32, is_shared=False),
            done: Tensor(shape=torch.Size([10, 1]), device=cpu, dtype=torch.bool, is_shared=False),
            next: TensorDict(
                fields={
                    pixels: Tensor(shape=torch.Size([10, 4, 64, 64]), device=cpu, dtype=torch.float32, is_shared=False)},
                batch_size=torch.Size([10]),
                device=cpu,
                is_shared=False),
            pixels: Tensor(shape=torch.Size([10, 4, 64, 64]), device=cpu, dtype=torch.float32, is_shared=False),
            pixels_save: Tensor(shape=torch.Size([10, 400, 600, 3]), device=cpu, dtype=torch.uint8, is_shared=False),
            reward: Tensor(shape=torch.Size([10, 1]), device=cpu, dtype=torch.float32, is_shared=False)},
        batch_size=torch.Size([10]),
        device=cpu,
        is_shared=False)



.. GENERATED FROM PYTHON SOURCE LINES 857-861

.. code-block:: default


    # imageio.mimwrite('cartpole.mp4', eval_rollout["pixels_save"].numpy(), fps=30);
    # Video('cartpole.mp4', width=480, height=360) #the width and height option as additional thing new in Ipython 7.6.1








.. GENERATED FROM PYTHON SOURCE LINES 862-888

Conclusion and possible improvements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We have seen that using TD(lambda) greatly improved the performance of our
algorithm. Other possible improvements could include:

- Using the Multi-Step post-processing. Multi-step will project an action
  to the nth following step, and create a discounted sum of the rewards in
  between. This trick can make the algorithm noticebly less myopic. To use
  this, simply create the collector with

      from torchrl.data.postprocs.postprocs import MultiStep
      collector = CollectorClass(..., postproc=MultiStep(gamma, n))

  where ``n`` is the number of looking-forward steps. Pay attention to the
  fact that the ``gamma`` factor has to be corrected by the number of
  steps till the next observation when being passed to
  ``vec_td_lambda_advantage_estimate``:

      gamma = gamma ** tensordict["steps_to_next_obs"]
- A prioritized replay buffer could also be used. This will give a
  higher priority to samples that have the worst value accuracy.
- A distributional loss (see ``torchrl.objectives.DistributionalDQNLoss``
  for more information).
- More fancy exploration techniques, such as NoisyLinear layers and such
  (check ``torchrl.modules.NoisyLinear``, which is fully compatible with the
  ``MLP`` class used in our Dueling DQN).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  47.181 seconds)


.. _sphx_glr_download_tutorials_coding_dqn.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: coding_dqn.py <coding_dqn.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: coding_dqn.ipynb <coding_dqn.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
